apply plugin: 'com.android.application'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    signingConfigs {
        config {
            keyAlias 'qatime'
            keyPassword '32147896'
            storeFile file('C:/Users/lenovo/Desktop/qatime.jks')
            storePassword '32147896'
        }
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.1'
//    defaultConfig {
//        applicationId "cn.qatime.player.debug"
//        minSdkVersion 14
//        targetSdkVersion 22
//        manifestPlaceholders = [package_name : "cn.qatime.player.debug", // 测试微信需使用正式包名
//                                yunxin_appkey: properties.getProperty("YunXinDebugAppKey"),
//                                amap_apikey  : properties.getProperty("amapDebugKey")]
//    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    productFlavors {
        flavors_debug {
            applicationId "cn.qatime.player"
            manifestPlaceholders = [package_name : "cn.qatime.player",
                                    yunxin_appkey: properties.getProperty("YunXinReleaseAppKey"),
                                    amap_apikey  : properties.getProperty("amapReleaseKey")]
        }
        flavors_release {
            applicationId "cn.qatime.player"
            manifestPlaceholders = [package_name : "cn.qatime.player",
                                    yunxin_appkey: properties.getProperty("YunXinReleaseAppKey"),
                                    amap_apikey  : properties.getProperty("amapReleaseKey")]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def appName = 'qatime_android'
            def buildName

            variant.productFlavors.each { product ->
                buildName = product.name
            }
            output.outputFile = new File(output.outputFile.parent, appName + "_" + getVersionNameFromManifest() + "_" + buildName + ".apk");
        }

    }
}

def getVersionNameFromManifest() {
    def manifestParser = new com.android.builder.core.DefaultManifestParser(android.sourceSets.main.manifest.srcFile)
    return manifestParser.getVersionName()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile project(':library_pulltorefresh')
    compile project(':common')
    compile project(':pushSDK')
    compile project(':vitamio')
}

